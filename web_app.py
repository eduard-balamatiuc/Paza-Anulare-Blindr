import streamlit as st
import mediapipe as mp
import cv2
import numpy as np
import tempfile
import time 
from PIL import Image
import os
import uuid
from face_matching_func_update import *
import pandas as pd
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import streamlit_authenticator as stauth
import requests
from io import BytesIO
from enchant.utils import levenshtein
from scipy.spatial import distance
import streamlit.components.v1 as components
from search_app import *
import time


compare_threshold = lambda x: 1 if x > 0.1 else 0
transform_to_list = lambda x: eval(x)
levenshtein_list = lambda user1, user2: np.mean([compare_threshold(
    np.min([levenshtein(element_user1, element_user2) / len(element_user1) for element_user2 in user2]))
    for element_user1 in user1])



PATH_TO_DATA = 'db.csv'
MODEL_PATH = 'facenet_keras.h5'

is_logined_person = False

COLUMN_NAMES = ['login', 'password', 'key', 'email', 'name', 'age', 'city', 'spend_time', 'movies', 'music', 'pet', 'profession', 'hobbies', 'social_status', 'gender', 'food','image_embedding', 'description', 'reviews', 'points']

db = pd.read_csv(PATH_TO_DATA, sep = '$')

#app_mode_pages = ['About App', 'Login In', 'Sign Up',
#				'Edit Profile', 'Search', 'Commit Review']

app_mode_pages = ['About App', 'Login In', 'Sign Up', 'Gifts']

hide_st_style = """
				<style>
				#MainMenu {visibility: hidden;}
				footer {visibility: hidden;}
				header {visibility: hidden;}
				</style>
				"""
st.markdown(hide_st_style, unsafe_allow_html = True)

st.title('Blindr')

st.markdown(
	"""
	<style>
	[data-testid="stSidebar"][aria-expanded="true"] > div:first-child
	{
		width: 350px
	}
	[data-testid="stSidebar"][aria-expanded="false"] > div:first-child
	{
		width: 350px
		margin-left: -350px
	}
	</style>
	""",
	unsafe_allow_html = True,
)

st.sidebar.title('Blindr Menu')

@st.cache()
def image_resize(image, width = None, height = None, inter = cv2.INTER_AREA):
	dim = None
	(h, w) = image.shape[:2]

	if width is None and height is None:
		return image

	if width is None:
		r = width/float(w)
		dim = (int(w * r), height)

	else:
		r = width/float(w)
		dim = (width, int(h * r))


	# resize the image
	resized = cv2.resize(image, dim, interpolation = inter)
	
	return resized

app_mode = st.sidebar.selectbox('Choose the App mode',
									app_mode_pages)

if app_mode == 'About App':
	st.markdown('This is a web application for organizing **dates**, **going outs** between **people with similar interests and appearance**. Every going out is encouraged to be generated by the platofrm, in order experience to be more **exiciting, brilliant and breath-taking**. The dates will remunerated wth a concrete amount of **points**. Everybody can change their points for some **goods** like cinema tikets, meals, etc.')

	st.markdown(
		"""
		<style>
		[data-testid="stSidebar"][aria-expanded="true"] > div:first-child
		{
			width: 350px
		}
		[data-testid="stSidebar"][aria-expanded="false"] > div:first-child
		{
			width: 350px
			margin-left: -350px
		}
		</style>
		""",
		unsafe_allow_html = True,
	)

	st.markdown(hide_st_style, unsafe_allow_html = True)


	st.image("adventure_time.gif")

	st.markdown(' #	About our team \n ')
	st.markdown('''
				Hey this is **Paza Anulare** team: **Balamatiuc Eduard**, **Clefos Alexandru**, **Graur Elena**, **Moglan Mihai** and **Stojoc Vladimir**. We are a group of Machine Learning and Computer Vision Engineers from Sigmoid and another companies. \n

				Check out our team on Social Media \n
				:smiley:  [Facebook](https://www.facebook.com/mihai.moglan.1) \n
				:stuck_out_tongue_winking_eye:  [LinkedIn](https://www.linkedin.com/in/mihai-moglan-237b14151/) \n
				:alien:  [GitHub](https://github.com/yourbeach)

				Have a nice day out!

				''')




elif app_mode == "Login In":
	st.set_option('deprecation.showfileUploaderEncoding', False)


	st.markdown(
		"""
		<style>
		[data-testid="stSidebar"][aria-expanded="true"] > div:first-child
		{
			width: 350px
		}
		[data-testid="stSidebar"][aria-expanded="false"] > div:first-child
		{
			width: 350px
			margin-left: -350px
		}
		</style>
		""",
		unsafe_allow_html = True,
	)
	st.markdown(hide_st_style, unsafe_allow_html = True)

	names = db.name.tolist()
	usernames = db.login.tolist()
	passwords = []
	for password in db.password.tolist():
		passwords.append(str(password))


	hashed_passwords = stauth.Hasher(passwords).generate()
	authenticator = stauth.Authenticate(names, usernames, hashed_passwords,
	    'some_cookie_name','some_signature_key', cookie_expiry_days=30)

	name, authentication_status, username = authenticator.login('Login','main')

	if authentication_status:
		
		db = pd.read_csv(PATH_TO_DATA, sep = '$')

		#print(len(db))

		st.write('Welcome *%s*' % (name))
		user_pos = db.loc[(db['login'] == username)]
		
		#print(user_pos)

		user_index = user_pos.index[0]

		master_key = user_pos['key'].to_string()

		to_edit_profile = st.checkbox('Edit Profile')
		to_search_quest = st.checkbox('Search Adventure')
		to_see_all_events = st.checkbox('See all available Events')
		to_commit_review = st.checkbox('Get Review')

		if to_edit_profile:
			edit_key = master_key

			with st.form('search_for_edit'):

				name_user = user_pos['name'].tolist()[0]

				st.write('Edit your information please')

				name = st.text_input(
						'Please provide us your displayed name:', name_user)

				
				age_user = user_pos['age'].tolist()[0]
				age = st.number_input(
						'Pick your age:', 0, 200, age_user)

				
				city_name_user = user_pos['city'].tolist()[0]
				cities = ['Chisinau', 'Orhei', 'Cahul', 'Balti']
				city_index = cities.index(city_name_user)

				city_name = st.selectbox(
						'Choose the name of the city you are in:',
						('Chisinau', 'Orhei', 'Cahul', 'Balti'), index = city_index)
				
				
				user_spent_time = user_pos['city'].tolist()[0]

				index_spent_time = 0
				if user_spent_time == 'actively':
					index_spent_time = 0
				elif user_spent_time == 'passively':
					index_spent_time = 1 

				how_to_spend_free_time = st.radio(
						'How do you like to spend your free time?',
						('actively', 'passively'), index = index_spent_time)

				user_movies_str = user_pos['movies'].tolist()[0]
				
				movies = ['Action', 'Comedy', 'Drama', 'Fantasy', 'Horror', 'Mystery', 'Romance', 'Thriller', 'Western', 'Anime']
				user_movies = []
				for movie in movies:
					if movie in user_movies_str:
						user_movies.append(movie)


				movies_genres = st.multiselect(
						'What genres of movies do you prefer?',
						['Action', 'Comedy', 'Drama', 'Fantasy', 'Horror', 'Mystery', 'Romance', 'Thriller', 'Western', 'Anime'],
						default = user_movies)

				user_music_str = user_pos['music'].tolist()[0]
				
				musics = ['Rock', 'Jazz', 'EDM', 'Dubstep', 'Techno', 'R&B', 'Country', 'Pop', 'Indie Rock', 'Electro', 'Metal']
				user_music = []
				for music in musics:
					if music in user_music_str:
						user_music.append(music)
				

				music_genres = st.multiselect(
						'What genres of music do you prefer?',
						['Rock', 'Jazz', 'EDM', 'Dubstep', 'Techno', 'R&B', 'Country', 'Pop', 'Indie Rock', 'Electro', 'Metal'],
						default = user_music)

				
				user_have_pet = user_pos['pet'].tolist()[0]

				have_pet_index = 0
				if user_have_pet == 'Yes':
					have_pet_index = 0
				elif user_have_pet == 'No':
					have_pet_index = 1

				have_pet = st.radio(
						'Do you have a pet to walk?',
						('Yes', 'No'), index = have_pet_index)


				profession_user = user_pos['profession'].tolist()[0]
				proffesions = ['Agriculture', 'Architecture','Construction','Arts','Communication','Business','Finance','Education','Government','Public Administration', 'Health Science', 'Information Technology',  'Law','Security','Marketing','Science','Engineering']
				profession_index = proffesions.index(profession_user)
				
				profession_domain = st.selectbox(
						'Select your profession domain:',
						('Agriculture', 'Architecture','Construction','Arts','Communication','Business','Finance','Education','Government','Public Administration', 'Health Science', 'Information Technology',  'Law','Security','Marketing','Science','Engineering',), index = profession_index)

				
				user_hobbies_str = user_pos['hobbies'].tolist()[0]

				hobbies_list = ['Reading', 'Martial Arts', 'Jewelry Making', 'Woodworking', 'Gardening', 'Video Games', 'Fishing', 'Team Sports', 'Walking', 'Yoga', 'Travelling', 'Watching Sports', 'Playing boardgames', 'Eating Out', 'Writing', 'Running', 'Volunteer work', 'Dancing', 'Singing', 'Painting', 'Cooking', 'Housework', 'Movie watching', 'Genealogy', 'Church Activities', 'Calligraphy', 'Podcasts', 'Collecting', 'Music listening', 'Skiing & Snowboarding', 'Shopping', 'Socializing']
				user_hobbies = []
				for hobby in hobbies_list:
					if hobby in user_hobbies_str:
						user_hobbies.append(hobby)

				hobbies = st.multiselect(
						'Select your hobbies:',
						['Reading', 'Martial Arts', 'Jewelry Making', 'Woodworking', 'Gardening', 'Video Games', 'Fishing', 'Team Sports', 'Walking', 'Yoga', 'Travelling', 'Watching Sports', 'Playing boardgames', 'Eating Out', 'Writing', 'Running', 'Volunteer work', 'Dancing', 'Singing', 'Painting', 'Cooking', 'Housework', 'Movie watching', 'Genealogy', 'Church Activities', 'Calligraphy', 'Podcasts', 'Collecting', 'Music listening', 'Skiing & Snowboarding', 'Shopping', 'Socializing'],
						user_hobbies)

				user_social_status = user_pos['social_status'].tolist()[0]
				
				social_status_index = 0
				if user_social_status == 'Single':
					social_status_index = 0
				elif user_social_status == 'Dating':
					social_status_index = 1
				elif user_social_status == 'Wedd':
					social_status_index = 2

				social_status = st.radio(
						'Select your social status:',
						('Single', 'Dating', 'Wedd'), index = social_status_index)

				
				user_gender = user_pos['gender'].tolist()[0]

				gender_index = 0
				if user_gender == 'Male':
					gender_index = 0
				elif user_gender == 'Female':
					gender_index = 1
				elif user_gender == 'Other':
					gender_index = 2
				
				gender = st.radio(
						'What are your gender?',
						('Male', 'Female', 'Other'), index = gender_index)

				user_food_str = user_pos['food'].tolist()[0]

				foods = ['Vegetarian', 'Vegan', 'Meat', 'Seafood', 'Junk food', 'Healthy food']
				user_food = []
				for food in foods:
					if food in user_food_str:
						user_food.append(food)			


				food_prefer = st.multiselect(
						'What food do you prefer?',
						['Vegetarian', 'Vegan', 'Meat', 'Seafood', 'Junk food', 'Healthy food'],
						user_food)

				image = st.file_uploader('Please upload your photo')

				user_description = user_pos['description'].tolist()[0]
				description = st.text_area('Please provide a short text about you, which anyone can read:', user_description)	
				
				image_array = np.array([])
				if image is not None:
					try:
						image_array = get_embedding(MODEL_PATH, image.name)
						valid_form = True
					except:
						st.write('Bad image, please upload another')

				edit = st.form_submit_button('Edit')

				if edit:
					st.write('Modifications done!')

					db.at[user_index, 'name'] = name
					db.at[user_index, 'age'] = age
					db.at[user_index, 'city'] = city_name
					db.at[user_index, 'spend_time'] = how_to_spend_free_time
					db.at[user_index, 'movies'] = movies_genres
					db.at[user_index, 'music'] = music_genres
					db.at[user_index, 'pet'] = have_pet
					db.at[user_index, 'profession'] = profession_domain
					db.at[user_index, 'hobbies'] = hobbies
					db.at[user_index, 'social_status'] = social_status
					db.at[user_index, 'gender'] = gender
					db.at[user_index, 'food'] = food_prefer
					db.at[user_index, 'description'] = description

					if image is not None:
						db[db['key'] == edit_key]['image_embedding'] = image.name

					db.to_csv(PATH_TO_DATA, sep = '$', index = False)

					try:
					    # Create your SMTP session
					    smtp = smtplib.SMTP('smtp.gmail.com', 587)
					    # Use TLS to add security
					    smtp.starttls()
					    # User Authentication
					    smtp.login("moglanmihai.test@gmail.com", "mjikqidmpciouklr")
					    sender = "moglanmihai.test@gmail.com"
					    receiver = user_pos['email'].tolist()[0]
					    msg = MIMEMultipart('alternative')
					    # Defining The Subject
					    msg['Subject'] = "Modifications on your account!"
					    html = """\
					    <html>
					      <head></head>
					      <body>
					        <p><b>There were made some modification with your personal data</b><br>

					           With respect,<br>
					           Paza Anulare Team
					        </p>
					      </body>
					    </html>
					    """
					    text = MIMEText(html, 'html')
					    msg.attach(text)
					    # Sending the Email
					    smtp.sendmail(sender, receiver, msg.as_string())
					    #  Terminating the session
					    smtp.quit()
					    print("Email sent successfully!")
					except Exception as ex:
					    print("Something went wrong....", ex)

		elif to_see_all_events:

			df = pd.read_csv('events.csv')

			for i in range(1,5):
			    cols = st.columns(3) 
			    for id in range(3):
			        response = requests.get(df.values[(i-1)*3+id,6])
			        image = Image.open(BytesIO(response.content))
			        print(image)
			        cols[id].markdown(f'''
			            <a href={df.values[(i-1)*3+id,7]}>
			                <img src={df.values[(i-1)*3+id,6]} style="height:230px; width:230px"/>
			            </a>''',
			            unsafe_allow_html=True
			        )
			        cols[id].text(df.values[(i-1)*3+id,0]+'\n'+'Category: '+
			        df.values[(i-1)*3+id,5]+'\n'+'Date: '+df.values[(i-1)*3+id,1] +'\n'+
			        'Location: '+df.values[(i-1)*3+id,4])

		elif to_commit_review:
			photo_checked = False
			with st.form("Reward sumbission"):
				st.write("This is the reward submission page")
				st.write("Please enter your reward details")
				event_id = st.text_input("Event ID")
				image = st.file_uploader("Image proof", type=["jpg", "png"])
				value_photo = st.form_submit_button("Submit photo")
				if value_photo:
					st.write("Thank you for your submission. We are now checking your photo")
					
					try:
						db = pd.read_csv(PATH_TO_DATA, sep = '$')
						quests = pd.read_csv('quests.csv', sep = '$')
						#print('event id:', event_id)
						#print(len(event_id))
						#print(len('bc4f1a7f-ba75-4afd-9f58-77c77e5fd2ee'))
						#print('bc4f1a7f-ba75-4afd-9f58-77c77e5fd2ee' == event_id)
						#print('quests:', quests)
						#print(quests['event_key'])
						#print(type(quests['event_key'][0]))
						#print(eval(quests['event_key'][0])[0])
						users_key = quests[quests['event_key'] == event_id]['users_key']

						nr_persons_find = 0

						#print('-----------------------')
						#print(type(users_key))
						#print(users_key.values[0])
						#print('---------------------------')

						for key_for in eval(users_key.values[0]):
							#print('key unique: ', key_for)
							#print('image name: ', db[db['key'] == key_for]['image_embedding'].values[0])
							photo_checked = check_presence('facenet_keras.h5', db[db['key'] == key_for]['image_embedding'].values[0], image.name)
							print(db[db['key'] == key_for]['image_embedding'].values[0], photo_checked)
							if photo_checked:
								nr_persons_find += 1


						photo_checked = check_presence('facenet_keras.h5', db[db['key'] == master_key[5:]]['image_embedding'].values[0], image.name)
						print(db[db['key'] == master_key[5:]]['image_embedding'].values[0], photo_checked)
						if photo_checked:
							nr_persons_find += 1


						
						if nr_persons_find == len(eval(users_key.values[0])) + 1:
							review_text = st.text_input("Give a review to the others")
							db.at[user_index, 'points'] += 200
							st.write("Thank you for your review. You got 200 kapiiki")

							for key_for in eval(users_key.values[0]):
								#db[db['key'] == key_for]['review'] += review_text
								user_pos_local = db.loc[db['key'] == key_for]
								user_index_local = user_pos_local.index[0]
								db.at[user_index_local, 'reviews'] += "Super!"


							value_review = st.form_submit_button("Submit review")
							# if value_review:
							
							db.to_csv(PATH_TO_DATA, sep = '$', index = False)
					except Exception as e:
						print(e)
						st.write("Sorry, our alghoritm didn't detect you in the photo. Please try again")


		elif to_search_quest:
			user_unique_key = master_key
			st.title('Search Event')
			option_mapper = {}

			with st.form("Submission"):
				option = st.selectbox(
				    'Select category:',
				    (None, 'Performances', 'Movies', 'Sports', 'Theatres', 'Concerts', 'Various', 'Conferences', 'Exhibitions'))
				option_age = st.selectbox(
				    'Select age range:',
				    (None, '18-25', '25-35', '35-45'))
				option_by_face = st.checkbox('Face match')
				submitted = st.form_submit_button("Submit")

				option_mapper['option'] = option

				if submitted:
					print(user_unique_key)
					matched_users_id = levanshtein_validation(user_unique_key)
					data = db.copy()
					match_users_data = data.iloc[matched_users_id]

					#print("Aici bleadi:", match_users_data)

					if option_age is not None:
					    age_range = [int(age) for age in option_age.split('-')]
					    match_users_data = match_users_data[(match_users_data['age'] >= age_range[0]) &
					                                        (match_users_data['age'] <= age_range[1])]

					if option_by_face:
					    signature = get_embedding(MODEL_PATH, data[data['key'] == user_unique_key[5:]]['image_embedding'].values[0])
					    match_users_data = match_user_by_face(match_users_data, signature)
					    #[match_users_data['key'] != user_unique_key[5:]]	
					st.table(match_users_data[['name', 'description', 'reviews']].reset_index().drop('index', axis=1))

					st.markdown('## Events:')

			events = pd.read_csv('events.csv')

			for idx, event in enumerate(events[events['Category'] == option_mapper['option']].iloc[:3].iterrows()):
				with st.form(f'Events_{idx}'):

					response = requests.get(event[1]['Image'])
					img = np.array(Image.open(BytesIO(response.content)))
					col1, col2, col3, col4, col5 = st.columns(5)

					with col1:
					    st.write(' ')
					with col2:
					    st.image(img, width=400)
					with col3:
					    st.write(' ')
					with col4:
					    st.write(' ')
					with col5:
					    st.write(' ')

					st.markdown(f"### {event[1]['Name']}")
					st.markdown(f"Date: {event[1]['Date']}")
					st.markdown(f"Price: {event[1]['Price']}")

					go_to_link = st.form_submit_button("Get to the site")
					if go_to_link:
		                # embed streamlit docs in a streamlit app
						components.iframe(event[1]['Link'])			

			
			try:
				quests = pd.read_csv('quests.csv', sep = '$')
				event_id = str(uuid.uuid4())
				#print('???????????????????????????????????????????????')
				#print(match_users_data['key'].tolist())
				#print(type(match_users_data['key'].tolist()))
				#print('???????????????????????????????????????????????')
				events_users = {'event_key': event_id, 'users_key' : match_users_data['key'].tolist()}	
				quests = quests.append(events_users, ignore_index = True)
				quests.to_csv('quests.csv', sep = '$', index = False)

				print('----------------------------------------------------------------')

				for key in match_users_data['key'].values:
					email = db[db['key'] == key]['email'].values[0]

					try:
						# Create your SMTP session
						smtp = smtplib.SMTP('smtp.gmail.com', 587)
						# Use TLS to add security
						smtp.starttls()
						# User Authentication
						smtp.login("moglanmihai.test@gmail.com", "mjikqidmpciouklr")
						sender = "moglanmihai.test@gmail.com"
						receiver = email
						msg = MIMEMultipart('alternative')
						# Defining The Subject
						msg['Subject'] = "Meet new friends! Reminder"	
						date = str(event[1]['Date']) # date
						location = str(event[1]['Link'])  # location
						participants = len(match_users_data) + 1  # participants of the event
						challenge = str(event[1]['Name'])  # challenge of the meeting
						# Defining email text
						html = """\
						<html>
						  <head></head>
						  <body>
						    <p><b>You have a meeting set on date</b>: %s<br>
						       <b>Location</b>: %s<br>
						       <b>Participants</b>: %s<br>
						       <b>Challenge</b>: %s<br>
						       <b>Event id</b>: %s<br>
						       Thank you for choosing us!<br>
						       With respect,<br>
						       Paza Anulare Team
						    </p>
						  </body>
						</html>
						""" % (date, location, participants, challenge, event_id)
						text = MIMEText(html, 'html')
						msg.attach(text)
						# Sending the Email
						smtp.sendmail(sender, receiver, msg.as_string())
						#  Terminating the session
						smtp.quit()
						print("Email sent successfully!")
					except Exception as ex:
						print("Something went wrong....", ex)
			except:
				pass

		authenticator.logout('Logout', 'main')

	elif authentication_status == False:
	    st.error('Username/password is incorrect')
	elif authentication_status == None:
	    st.warning('Please enter your username and password')

elif app_mode == "Sign Up":

	st.set_option('deprecation.showfileUploaderEncoding', False)


	st.markdown(
		"""
		<style>
		[data-testid="stSidebar"][aria-expanded="true"] > div:first-child
		{
			width: 350px
		}
		[data-testid="stSidebar"][aria-expanded="false"] > div:first-child
		{
			width: 350px
			margin-left: -350px
		}
		</style>
		""",
		unsafe_allow_html = True,
	)
	st.markdown(hide_st_style, unsafe_allow_html = True)

	with st.form('sign_up_form'):

		st.write('Please fill in the form with relevant information in order to get a precize search for your future requests!')

		login = st.text_input(
				'Please provide your login:')

		password = st.text_input(
				'Please provide your password:', type = 'password')


		email = st.text_input(
				'Please provide your email:')

		name = st.text_input(
				'Please provide us your displayed name:')

		age = st.number_input(
				'Pick your age:', 0, 200)

		city_name = st.selectbox(
				'Choose the name of the city you are in:',
				('Chisinau', 'Orhei', 'Cahul', 'Balti'))
		
		how_to_spend_free_time = st.radio(
				'How do you like to spend your free time?',
				('actively', 'passively'))

		movies_genres = st.multiselect(
				'What genres of movies do you prefer?',
				['Action', 'Comedy', 'Drama', 'Fantasy', 'Horror', 'Mystery', 'Romance', 'Thriller', 'Western', 'Anime'],
				['Comedy'])

		music_genres = st.multiselect(
				'What genres of music do you prefer?',
				['Rock', 'Jazz', 'EDM', 'Dubstep', 'Techno', 'R&B', 'Country', 'Pop', 'Indie Rock', 'Electro', 'Metal'],
				['Rock'])

		have_pet = st.radio(
				'Do you have a pet to walk?',
				('Yes', 'No'))

		profession_domain = st.selectbox(
				'Select your profession domain:',
				('Agriculture', 'Architecture','Construction','Arts','Communication','Business','Finance','Education','Government','Public Administration', 'Health Science', 'Information Technology',  'Law','Security','Marketing','Science','Engineering',))

		hobbies = st.multiselect(
				'Select your hobbies:',
				['Reading', 'Martial Arts', 'Jewelry Making', 'Woodworking', 'Gardening', 'Video Games', 'Fishing', 'Team Sports', 'Walking', 'Yoga', 'Travelling', 'Watching Sports', 'Playing boardgames', 'Eating Out', 'Writing', 'Running', 'Volunteer work', 'Dancing', 'Singing', 'Painting', 'Cooking', 'Housework', 'Movie watching', 'Genealogy', 'Church Activities', 'Calligraphy', 'Podcasts', 'Collecting', 'Music listening', 'Skiing & Snowboarding', 'Shopping', 'Socializing'],
				['Reading', 'Playing boardgames'])

		social_status = st.radio(
				'Select your social status:',
				('Single', 'Dating', 'Wedd'))

		gender = st.radio(
				'What are your gender?',
				('Male', 'Female', 'Other'))

		food_prefer = st.multiselect(
				'What food do you prefer?',
				['Vegetarian', 'Vegan', 'Meat', 'Seafood', 'Junk food', 'Healthy food'],
				['Healthy food'])

		image = st.file_uploader('Please upload your photo')

		description = st.text_area('Please provide a short text about you, which anyone can read:')	

		allow_data = st.checkbox('By checking this box, you allow us to process your personal data.')

		valid_form = False

		image_array = np.array([])

		if name != '' and age > 0 and len(movies_genres) > 0 and len(music_genres) > 0 and len(hobbies) > 0 and len(food_prefer) > 0 and image != None and description != '':
			try:
				image_array = get_embedding(MODEL_PATH, image.name)
				valid_form = True
			except:
				st.write('Bad image, please upload another')

		
		# Every form must have a submit button.
		submitted = st.form_submit_button('Submit')
		if submitted and allow_data and valid_form:
			st.write('DONE!')
			user_key = uuid.uuid4()
			st.write("Your personal key is ", str(user_key), ". Don't loose it. You can use it to make searches for people and to report dates!")

			d = {'login': [login],
					'password': [password],
					'key': [user_key], 
					'email': [email],
					'name': [name],
					'age': [age],
					'city': [city_name],
					'spend_time': [how_to_spend_free_time],
					'movies':[movies_genres],
					'music': [music_genres],
					'pet': [have_pet],
					'profession': [profession_domain],
					'hobbies': [hobbies],
					'social_status': [social_status],
					'gender': [gender],
					'food': [food_prefer],
					'image_embedding':  [image.name],
					'description': [description],
					'reviews': [' '],
					'points': [0]}


			user_df = pd.DataFrame(data = d)

			db = db.append(user_df, ignore_index = True)
			db.to_csv(PATH_TO_DATA, sep = '$', index = False)

			try:
			    # Create your SMTP session
			    smtp = smtplib.SMTP('smtp.gmail.com', 587)
			    # Use TLS to add security
			    smtp.starttls()
			    # User Authentication
			    smtp.login("moglanmihai.test@gmail.com", "mjikqidmpciouklr")
			    sender = "moglanmihai.test@gmail.com"
			    receiver = email
			    msg = MIMEMultipart('alternative')
			    # Defining The Subject
			    msg['Subject'] = "Welcome to Blindr!"
			    html = """\
			    <html>
			      <head></head>
			      <body>
			        <p><b>We are happy to see you here!</b><br>

			           With respect,<br>
			           Paza Anulare Team
			        </p>
			      </body>
			    </html>
			    """
			    text = MIMEText(html, 'html')
			    msg.attach(text)
			    # Sending the Email
			    smtp.sendmail(sender, receiver, msg.as_string())
			    #  Terminating the session
			    smtp.quit()
			    print("Email sent successfully!")
			except Exception as ex:
			    print("Something went wrong....", ex)




		elif submitted and not (allow_data and valid_form) :
			st.write('Please check the box above and fill in the form completely!')






elif app_mode == "Gifts":

	st.set_option('deprecation.showfileUploaderEncoding', False)

	st.markdown(
		"""
		<style>
		[data-testid="stSidebar"][aria-expanded="true"] > div:first-child
		{
			width: 350px
		}
		[data-testid="stSidebar"][aria-expanded="false"] > div:first-child
		{
			width: 350px
			margin-left: -350px
		}
		</style>
		""",
		unsafe_allow_html = True,
	)
	st.write('Here you can see the gifts you can get using the bonus points')

	gifts = pd.DataFrame(
			data = {'Reward' : ["A 10 mark at Bostan's exam", "A 5 mark at Vdovicenco and Gavrilita laboratory", "Cinema ticket", "1kg of carrots", "One upgraded public transport ticket", "A very poor chance that Allied Testing, MixBook, Amdaris or Noction will read your pathetic CV "]
					,'Price' : [1000, 900, 560, 120, 430, 4242]})
	
	st.table(gifts)	
